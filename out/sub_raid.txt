# precombat
var priority_rotation = priority_rotation
var trinket_sync_slot = 1 if trinket.1.has_stat.any_dps & (!trinket.2.has_stat.any_dps | trinket.1.cooldown.duration >= trinket.2.cooldown.duration)
var trinket_sync_slot = 2 if trinket.2.has_stat.any_dps & (!trinket.1.has_stat.any_dps | trinket.2.cooldown.duration > trinket.1.cooldown.duration)

# actions
var slice_and_dice.up = slice_and_dice.up
call_action_list.cds
call_action_list.items
slice_and_dice if cp >= 1 & !slice_and_dice.up
run_action_list,name = stealthed if stealthed.all
call_action_list.stealth_cds
call_action_list.finish if 0 & cp =  = cp_max_spend
call_action_list.finish if cp >= cp_max_spend & !0
call_action_list.finish if (cp.deficit <= 1 + 0 | fight_remains <= 1 & cp >= 3) & !0
call_action_list.build if energy.deficit <= 20 + 0 * 25 + 0 * 20 + 1 * 20

# build
shuriken_storm if targets >= 2 + (0 & lingering_shadow.remains >= 6 | perforated_veins.up) - (!find_weakness.up & !talent.improved_backstab) & (flawless_form.up | 0)
shuriken_storm if clear_the_witnesses.up & (!symbols_of_death.up | 0) & (lingering_shadow.remains <= 6 | 1)
gloomblade
backstab

# cds
var ruptures_before_flag = priority_rotation | targets <= 4 | 1 & 1 | (0 & (targets >= 5 & active_rupture >= targets - 2)) | 1
cold_blood if 0 & cp >= 6
sepsis if slice_and_dice.up & (cooldown.shadow_blades.remains <= 3 & cooldown.symbols_of_death.remains <= 3 | fight_remains <= 12)
flagellation,target_if = max:target.time_to_die if slice_and_dice.up & ruptures_before_flag & cp >= 5 & target.time_to_die > 10 & (cooldown.shadow_blades.remains <= 2 | fight_remains <= 24) & (0 | cooldown.symbols_of_death.remains <= 3 | symbols_of_death.remains > 3)
symbols_of_death if 0 & slice_and_dice.up & (shadow_blades.up | cooldown.shadow_blades.remains > 20)
symbols_of_death if 1 & slice_and_dice.up & symbols_of_death.remains <= 3 & !the_rotten.up & (cooldown.flagellation.remains > 10 | cooldown.flagellation.up & cooldown.shadow_blades.remains >= 20 | shadow_dance.remains >= 2)
shadow_blades if slice_and_dice.up & cp <= 1 & (flagellation_up | 0) | fight_remains <= 20
echoing_reprimand if slice_and_dice.up & cp.deficit >= 3 & (0 | 1 | shadow_dance.up)
shuriken_tornado if slice_and_dice.up & symbols_of_death.up & cp <= 2 & !premeditation.up & (0 | cooldown.flagellation.remains > 20) & targets.shuriken_storm >= 3
shuriken_tornado if slice_and_dice.up & !shadow_dance.up & !flagellation_up & !flagellation_persist.up & !shadow_blades.up & targets.shuriken_storm <= 2 & !raid_event.adds.up
vanish if shadow_dance.up & 1 & 1 & (cp.deficit > 1) & (cooldown.flagellation.remains >= 60 | 0 | fight_remains <= (30 * cooldown.vanish.charges)) & cooldown.secret_technique.remains >= 10
shadow_dance if !shadow_dance.up & (1 & shadow_blades.up & ((0 & subterfuge.up) | (rupture.ticking & slice_and_dice.up & 1))) | fight_remains <= 8
thistle_tea if !thistle_tea.up & (shadow_dance.remains >= 6) | fight_remains <= (6 * cooldown.thistle_tea.charges)
potion if bloodlust.react | fight_remains < 30 | symbols_of_death.up & (shadow_blades.up | cooldown.shadow_blades.remains <= 10)
var racial_sync = shadow_blades.up | 0 & symbols_of_death.up | fight_remains < 20
invoke_external_buff,name = power_infusion if shadow_dance.up

# finish
var secret_condition = ((danse_macabre.stack >= 3) | 0 | (1 & shadow_dance.up & (escalating_blade.stack >= 2 | shadow_blades.up)))
rupture if !rupture.ticking & target.time_to_die - remains > 6
var skip_rupture = thistle_tea.up & targets.shuriken_storm = 1 | shadow_dance.up & (targets.shuriken_storm = 1 | rupture.ticking & targets.shuriken_storm >= 2) | 0
rupture if (!skip_rupture | priority_rotation) & target.time_to_die - remains > 6 & refreshable
coup_de_grace if fazed.up & (shadow_dance.up | (symbols_of_death.up & cooldown.shadow_dance.charges_fractional <= 0.85))
cold_blood if secret_condition & cooldown.secret_technique.ready
secret_technique if secret_condition & (0 | cooldown.cold_blood.remains > shadow_dance.remains - 2 | 0)
rupture,cycle_targets = 1 if !skip_rupture & !priority_rotation & targets.shuriken_storm >= 2 & target.time_to_die >= (2 * cp) & refreshable
rupture if !skip_rupture & finality_rupture.up & (cooldown.symbols_of_death.remains <= 3 | symbols_of_death.up)
black_powder if !priority_rotation & 0 & targets >= 3 & !0
black_powder if !priority_rotation & 1 & ((escalating_blade.stack = 4 & !shadow_dance.up) | targets >= 3 & !flawless_form.up | (!used_for_danse & shadow_dance.up & 0 & targets >= 3))
coup_de_grace if fazed.up
eviscerate

# items
use_item,name = treacherous_transmitter if shadow_blades.up | fight_remains <= 15
do_treacherous_transmitter_task if shadow_blades.up | fight_remains <= 15
use_items,slots = trinket1 if (trinket_sync_slot = 1 & (shadow_blades.up | (1 + cooldown.shadow_blades.remains) >= trinket.1.cooldown.duration | fight_remains <= 20) | (trinket_sync_slot = 2 & (!trinket.2.cooldown.ready & !shadow_blades.up & cooldown.shadow_blades.remains > 20)) | !trinket_sync_slot)
use_items,slots = trinket2 if (trinket_sync_slot = 2 & (shadow_blades.up | (1 + cooldown.shadow_blades.remains) >= trinket.2.cooldown.duration | fight_remains <= 20) | (trinket_sync_slot = 1 & (!trinket.1.cooldown.ready & !shadow_blades.up & cooldown.shadow_blades.remains > 20)) | !trinket_sync_slot)

# stealth_cds
vanish if 0 & 0 & cp.deficit >= 3 & (!rupture.ticking | (shadow_blades.up & symbols_of_death.up) | 0 | fight_remains < 10)
vanish if !shadow_dance.up & 1 & 0 & (cp.deficit > 1 | shadow_blades.up) & (cooldown.flagellation.remains >= 60 | 0 | fight_remains <= (30 * cooldown.vanish.charges)) & cooldown.secret_technique.remains >= 10
shadow_dance if rupture.ticking & slice_and_dice.up & (symbols_of_death.remains >= 6 & !flagellation_up | symbols_of_death.up & shadow_blades.up | shadow_blades.up & 0) & cooldown.secret_technique.remains < 10 + 12 * 0 & (1 | (cp.deficit >= 7 & !shadow_blades.up | shadow_blades.up))
vanish if 0 & 1 & cp.deficit >= 3 & (symbols_of_death.up | cooldown.symbols_of_death.remains >= 3)
shadowmeld if energy >= 40 & cp.deficit > 3

# stealthed
shadowstrike if 0 & !deathstalkers_mark.up & !0
call_action_list.finish if 0 & cp =  = cp_max_spend
call_action_list.finish if cp >= cp_max_spend & !0
call_action_list.finish if shuriken_tornado.up & cp.deficit <= 2 & !0
call_action_list.finish if (cp.deficit <= 1 + 0) & !0
shadowstrike if (!used_for_danse & shadow_blades.up) | (1 & targets >= 2)
shuriken_storm if !premeditation.up & targets >= 4
gloomblade if lingering_shadow.remains >= 10 & shadow_blades.up & targets = 1
shadowstrike

